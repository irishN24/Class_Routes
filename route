#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
class route {
    int *r, n; // r – массив, представляющий маршрут; n – количество городов
public:
    route(int num = 0); // создает начальную перестановку по возрастанию ++
    route(const route&); // конструктор копирования
    route & operator = (const route&); // операция присваивания
    ~route() { // деструктор
        if(r) delete []r; r = NULL;
    }
    int routePrice(int **); // вычисляет стоимость маршрута по матрице стоимости ++
    bool nextRoute(); // вычисляет следующий маршрут, используя алгоритм Дейкстры
    friend ostream & operator << (ostream&, const route&); // вывод маршрута ++
};
//начальная перестановка
route::route(int num): n(num){
    r = new int[n];
    for (int i = 0; i < n; i++){
        r[i] = i;
    }
}
route & route::operator = (const route &other){

}
//заполнение матрицы
void fillCostMatrix(int **costMatrix, int numCity){
    cout << "Enter the costMatrix (" << numCity << "*" << numCity << "):";
    for (int i = 0; i < numCity; i++){
        for (int j = 0; j < numCity; j++){
            cin >> costMatrix[i][j];
        }
    }
}
/*void Permutation (std::vector<int>& P) {
    int n;
    n = P.size();

    int i = n - 2;
    while (i >= 0 && P[i] >= P[i + 1]) {
        i--;
    }
    if (i < 0) {
        std::cout << "There is no next permutation!!!" << std::endl;
        return;
    }
    else {
        int j = n - 1;
        while (P[j] <= P[i]) {
            j--;
        }
        std::swap(P[i], P[j]);

        std::reverse(P.begin() + i + 1, P.end());

        std::cout << "Next permutation: ";
        for (int num : P) {
            std::cout << num << " ";
        }
        std::cout << std::endl;
    }
}*/
int route::routePrice(int **costMatrix){
    int price = 0;
    for(int i = 0; i < n-1; i++){
        price += costMatrix[r[n-1]][r[i+1]];
    }
    price += costMatrix[r[n-1]][r[0]];
    return price;
}
/*bool route::nextRoute(){
    return Permutation(r, r+n);
}*/
ostream &operator << (ostream &os, const route &rt){
    for (int i = 0; i < rt.n; i++){
        os << rt.r[i] << "";
    }
    return os;
}


int main() {
    int numCity;
    cout << "Enter the numbers of cities: ";
    cin >> numCity;
    route rt(numCity);

    //матрица стоимости
    int **costMatrix = new int*[numCity];
    for (int i = 0; i < numCity; i++){
        costMatrix[i] = new int[numCity];
    }
    fillCostMatrix(costMatrix, numCity);

    cout << "Next route: " << rt << "\n";
    cout << "Route price: " << rt.routePrice(costMatrix) << "\n";

    while(rt.nextRoute()){
        cout << "Next route: " << rt << "\n";
        cout << "Route price: " << rt.routePrice(costMatrix) << "\n";
    }

    for (int i = 0; i < numCity; i++){
        delete[]costMatrix[i];
    }
    delete[]costMatrix;

    return 0;
}
